// Code generated by MockGen. DO NOT EDIT.
// Source: resource_service.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/keptn/go-utils/pkg/api/models"
	api "github.com/keptn/go-utils/pkg/api/utils"
)

// MockV1KeptnResourceHandler is a mock of V1KeptnResourceHandler interface.
type MockV1KeptnResourceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockV1KeptnResourceHandlerMockRecorder
}

// MockV1KeptnResourceHandlerMockRecorder is the mock recorder for MockV1KeptnResourceHandler.
type MockV1KeptnResourceHandlerMockRecorder struct {
	mock *MockV1KeptnResourceHandler
}

// NewMockV1KeptnResourceHandler creates a new mock instance.
func NewMockV1KeptnResourceHandler(ctrl *gomock.Controller) *MockV1KeptnResourceHandler {
	mock := &MockV1KeptnResourceHandler{ctrl: ctrl}
	mock.recorder = &MockV1KeptnResourceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV1KeptnResourceHandler) EXPECT() *MockV1KeptnResourceHandlerMockRecorder {
	return m.recorder
}

// GetResource mocks base method.
func (m *MockV1KeptnResourceHandler) GetResource(scope api.ResourceScope, options ...api.URIOption) (*models.Resource, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{scope}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*models.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockV1KeptnResourceHandlerMockRecorder) GetResource(scope interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{scope}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockV1KeptnResourceHandler)(nil).GetResource), varargs...)
}
