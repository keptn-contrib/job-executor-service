// Code generated by MockGen. DO NOT EDIT.
// Source: keptn-contrib/job-executor-service/pkg/keptn (interfaces: UniformClient,CloudEventSender)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/keptn/go-utils/pkg/api/models"
	v2 "github.com/keptn/go-utils/pkg/api/utils/v2"
)

// MockUniformClient is a mock of UniformClient interface.
type MockUniformClient struct {
	ctrl     *gomock.Controller
	recorder *MockUniformClientMockRecorder
}

// MockUniformClientMockRecorder is the mock recorder for MockUniformClient.
type MockUniformClientMockRecorder struct {
	mock *MockUniformClient
}

// NewMockUniformClient creates a new mock instance.
func NewMockUniformClient(ctrl *gomock.Controller) *MockUniformClient {
	mock := &MockUniformClient{ctrl: ctrl}
	mock.recorder = &MockUniformClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUniformClient) EXPECT() *MockUniformClientMockRecorder {
	return m.recorder
}

// GetRegistrations mocks base method.
func (m *MockUniformClient) GetRegistrations(arg0 context.Context, arg1 v2.UniformGetRegistrationsOptions) ([]*models.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrations", arg0, arg1)
	ret0, _ := ret[0].([]*models.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrations indicates an expected call of GetRegistrations.
func (mr *MockUniformClientMockRecorder) GetRegistrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrations", reflect.TypeOf((*MockUniformClient)(nil).GetRegistrations), arg0, arg1)
}

// MockCloudEventSender is a mock of CloudEventSender interface.
type MockCloudEventSender struct {
	ctrl     *gomock.Controller
	recorder *MockCloudEventSenderMockRecorder
}

// MockCloudEventSenderMockRecorder is the mock recorder for MockCloudEventSender.
type MockCloudEventSenderMockRecorder struct {
	mock *MockCloudEventSender
}

// NewMockCloudEventSender creates a new mock instance.
func NewMockCloudEventSender(ctrl *gomock.Controller) *MockCloudEventSender {
	mock := &MockCloudEventSender{ctrl: ctrl}
	mock.recorder = &MockCloudEventSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudEventSender) EXPECT() *MockCloudEventSenderMockRecorder {
	return m.recorder
}

// SendEvent mocks base method.
func (m *MockCloudEventSender) SendEvent(arg0 context.Context, arg1 models.KeptnContextExtendedCE, arg2 v2.APISendEventOptions) (*models.EventContext, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.EventContext)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockCloudEventSenderMockRecorder) SendEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockCloudEventSender)(nil).SendEvent), arg0, arg1, arg2)
}
