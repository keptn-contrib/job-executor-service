// Code generated by MockGen. DO NOT EDIT.
// Source: config_service.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/keptn/go-utils/pkg/api/models"
	v2 "github.com/keptn/go-utils/pkg/api/utils/v2"
	afero "github.com/spf13/afero"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetAllKeptnResources mocks base method.
func (m *MockConfigService) GetAllKeptnResources(fs afero.Fs, resource string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKeptnResources", fs, resource)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKeptnResources indicates an expected call of GetAllKeptnResources.
func (mr *MockConfigServiceMockRecorder) GetAllKeptnResources(fs, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKeptnResources", reflect.TypeOf((*MockConfigService)(nil).GetAllKeptnResources), fs, resource)
}

// GetKeptnResource mocks base method.
func (m *MockConfigService) GetKeptnResource(fs afero.Fs, resource string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeptnResource", fs, resource)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeptnResource indicates an expected call of GetKeptnResource.
func (mr *MockConfigServiceMockRecorder) GetKeptnResource(fs, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeptnResource", reflect.TypeOf((*MockConfigService)(nil).GetKeptnResource), fs, resource)
}

// MockV2ResourceHandler is a mock of V2ResourceHandler interface.
type MockV2ResourceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockV2ResourceHandlerMockRecorder
}

// MockV2ResourceHandlerMockRecorder is the mock recorder for MockV2ResourceHandler.
type MockV2ResourceHandlerMockRecorder struct {
	mock *MockV2ResourceHandler
}

// NewMockV2ResourceHandler creates a new mock instance.
func NewMockV2ResourceHandler(ctrl *gomock.Controller) *MockV2ResourceHandler {
	mock := &MockV2ResourceHandler{ctrl: ctrl}
	mock.recorder = &MockV2ResourceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV2ResourceHandler) EXPECT() *MockV2ResourceHandlerMockRecorder {
	return m.recorder
}

// GetAllServiceResources mocks base method.
func (m *MockV2ResourceHandler) GetAllServiceResources(ctx context.Context, project, stage, service string, opts v2.ResourcesGetAllServiceResourcesOptions) ([]*models.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServiceResources", ctx, project, stage, service, opts)
	ret0, _ := ret[0].([]*models.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServiceResources indicates an expected call of GetAllServiceResources.
func (mr *MockV2ResourceHandlerMockRecorder) GetAllServiceResources(ctx, project, stage, service, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceResources", reflect.TypeOf((*MockV2ResourceHandler)(nil).GetAllServiceResources), ctx, project, stage, service, opts)
}

// GetResource mocks base method.
func (m *MockV2ResourceHandler) GetResource(ctx context.Context, scope v2.ResourceScope, opts v2.ResourcesGetResourceOptions) (*models.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", ctx, scope, opts)
	ret0, _ := ret[0].(*models.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockV2ResourceHandlerMockRecorder) GetResource(ctx, scope, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockV2ResourceHandler)(nil).GetResource), ctx, scope, opts)
}
