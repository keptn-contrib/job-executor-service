// Code generated by MockGen. DO NOT EDIT.
// Source: config_service.go

// Package keptn is a generated GoMock package.
package keptn

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	afero "github.com/spf13/afero"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetAllKeptnResources mocks base method.
func (m *MockConfigService) GetAllKeptnResources(fs afero.Fs, resource string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKeptnResources", fs, resource)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKeptnResources indicates an expected call of GetAllKeptnResources.
func (mr *MockConfigServiceMockRecorder) GetAllKeptnResources(fs, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKeptnResources", reflect.TypeOf((*MockConfigService)(nil).GetAllKeptnResources), fs, resource)
}

// GetKeptnResource mocks base method.
func (m *MockConfigService) GetKeptnResource(fs afero.Fs, resource string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeptnResource", fs, resource)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeptnResource indicates an expected call of GetKeptnResource.
func (mr *MockConfigServiceMockRecorder) GetKeptnResource(fs, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeptnResource", reflect.TypeOf((*MockConfigService)(nil).GetKeptnResource), fs, resource)
}
