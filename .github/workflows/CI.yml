name: CI
on:
  # always execute docker build when something is pushed to master or release-* branches
  push:
    branches:
      - 'master'
      - 'main'
      - 'release-*'
  # in addition, execute for pull requests to those branches
  pull_request:
    branches:
      - 'master'
      - 'main'
      - 'release-*'
defaults:
  run:
    shell: bash
jobs:
  prepare_ci_run:
    name: Prepare CI Run
    # Prepare CI Run looks at what has been changed in this commit/PR/... and determines which artifacts should be
    # built afterwards (in other jobs that depend on this one).
    runs-on: ubuntu-20.04
    outputs: # declare what this job outputs (so it can be re-used for other jobs)
      # build config
      # metadata
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      DATE: ${{ steps.get_datetime.outputs.DATE }}
      TIME: ${{ steps.get_datetime.outputs.TIME }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # need to checkout "all commits" for certain features to work (e.g., get all changed files)

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Extract branch name
        id: extract_branch
        # see https://github.com/keptn/gh-action-extract-branch-name for details
        uses: keptn/gh-action-extract-branch-name@main

      - name: 'Get Previous tag'
        id: get_previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1.1"
        with:
          fallback: "0.0.1"
      - name: 'Get next patch version'
        id: get_next_semver_tag
        uses: "WyriHaximus/github-action-next-semvers@v1.1"
        with:
          version: ${{ steps.get_previous_tag.outputs.tag }}
      - name: Get the version
        id: get_version
        env:
          BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
          BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
        shell: bash
        run: |
          # determine version
          GIT_LAST_TAG=${{ steps.get_previous_tag.outputs.tag }}
          GIT_NEXT_TAG=${{ steps.get_next_semver_tag.outputs.patch }}
          echo "GIT_LAST_TAG=${GIT_LAST_TAG}, GIT_NEXT_TAG=${GIT_NEXT_TAG}"

          if [[ "$BRANCH" == "release-"* ]]; then
            # Release Branch: extract version from branch name
            VERSION=${BRANCH#"release-"}
            else
            if [[ "$BRANCH" == "master" ]]; then
              # master branch = latest
              VERSION="${GIT_NEXT_TAG}-dev"
            else
              # Feature/Development Branch - use last tag with branch slug
              VERSION="${GIT_NEXT_TAG}-dev-${BRANCH_SLUG}"
            fi
          fi

          echo "VERSION=${VERSION}"

          echo "##[set-output name=VERSION;]$(echo ${VERSION})"
      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"

  ############################################################################
  # Unit tests                                                               #
  ############################################################################
  unit-tests:
    name: Unit Tests
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16.2
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Test
        run: go test -coverprofile=coverage.txt -covermode=atomic -v ./...
        working-directory: .


  ############################################################################
  # Build Docker Image                                                      #
  ############################################################################
  docker_build:
    needs: [prepare_ci_run, unit-tests]
    name: Docker Build
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - id: docker_login
        name: Docker Login
        # only run docker login on pushes; also for PRs, but only if this is not a fork
        if: (github.event_name == 'push') || (github.event.pull_request.head.repo.full_name == github.repository)
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't push images to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - id: docker_build_service
        name: Docker Build Service
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.IMAGE }}"
          DATETIME: ${{ env.DATETIME }}

      - id: docker_build_initcontainer
        name: Docker Build InitContainer
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.IMAGE_INITCONTAINER }}"
          DATETIME: ${{ env.DATETIME }}
          FILE: ${{ env.DOCKERFILE_INITCONTAINER }}

      - id: create_docker_build_report
        name: Create Docker Build Report
        run: |
          echo "The following Docker Images have been built: " > docker_build_report_final.txt
          cat docker_build_report.txt >> docker_build_report_final.txt || echo "* No images have been built or uploaded" >> docker_build_report_final.txt
          echo "---"
          cat docker_build_report_final.txt

      - id: report_docker_build_to_pr
        # Comment the docker build report to the PR
        # This only works for PRs coming from inside of the repo, not from forks
        name: Report Docker Build to PR
        if: (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name == github.repository)
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: docker_build_report_final.txt
          recreate: true